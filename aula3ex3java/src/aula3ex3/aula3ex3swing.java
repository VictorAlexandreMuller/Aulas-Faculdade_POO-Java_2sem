package aula3ex3;

import static aula3ex3.aula3ex3swing.VerificarFloat.isFloat;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class aula3ex3swing extends javax.swing.JFrame {

    public aula3ex3swing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboVINCULO = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtSALARIO = new javax.swing.JTextField();
        txtNOME = new javax.swing.JTextField();
        txtCRACHA = new javax.swing.JTextField();
        txtDESCONTO = new javax.swing.JTextField();
        txtQTHORA = new javax.swing.JTextField();
        txtVALORHORA = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(25, 64, 89));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Folha de Pagamento dos Funcionários", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 16), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Crachá");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nome");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tipo Vínculo");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Salário");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Desconto");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Valor Hora");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Qt. de Horas");

        comboVINCULO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "None", "H" }));

        jButton1.setText("Criar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mostrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Alterar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(198, 198, 198)
                                .addComponent(jLabel6)))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSALARIO, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtVALORHORA, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDESCONTO, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txtQTHORA, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(181, 181, 181))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(189, 189, 189)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCRACHA, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(106, 106, 106)
                                .addComponent(txtNOME, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(106, 106, 106)
                                .addComponent(comboVINCULO, 0, 69, Short.MAX_VALUE)))))
                .addGap(80, 80, 80))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboVINCULO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCRACHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNOME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSALARIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDESCONTO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtQTHORA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtVALORHORA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Funcionario funcionario; // Variavel Global

    // Variavel global para identificar se o campo esta vazio
    // Para esta condicional foi tentado realizar 'txtCRACHA == null'.
    // Entretanto, deve-se verificar o conteúdo dos campos de entrada, não os próprios objetos.
    private boolean isFieldEmpty(JTextField field) {
        return field.getText().isEmpty();
    }

    // Variavel global para identificar int
    private boolean isNumeric(String input) {
        return input.matches("\\d+");
    }

    // Variavel global para resumir a mensagem JOptionPane
    private void showMessageDialog(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    // Variavel global para identificar Float
    public class VerificarFloat {

        public static boolean isFloat(String input) {
            try {
                Float.parseFloat(input);
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTÃO CRIAR

        // Primeiro verifica-se se o campo Cracha está vazio. Se não estiver vazio, então pega o texto inserido no campo 'txtCRACHA' e usa-se
        // 'matches()' para verificar se contém apenas dígitos, sendo o "\\d+" uma expressão regular que corresponde a um ou mais dígitos.
        if (isFieldEmpty(txtCRACHA)) {
            showMessageDialog("Por favor, preencha o Crachá do funcionário para realizar o seu cadastro.");
        } else {
            String CrachaInput = txtCRACHA.getText();
            if (!isNumeric(CrachaInput)) {
                showMessageDialog("Por favor, preencha o campo Crachá apenas com números para realizar o cadastro.");
            } else if (isFieldEmpty(txtNOME)) {
                showMessageDialog("Por favor, preencha o Nome do funcionário para realizar o seu cadastro.");
            } else if (comboVINCULO.getSelectedItem().equals("-")) {      // Por ser uma ComboBox, foi necessario dar "getSelectedItem" ao em vez de "getText".
                showMessageDialog("Por favor, selecione o Tipo de Vínculo para realizar o cadastro.");
            } else if (isFieldEmpty(txtSALARIO)) {
                showMessageDialog("Por favor, preencha o Salário do funcionário para realizar o seu cadastro.");
            } else {
                String SalarioInput = txtSALARIO.getText();
                if (!isFloat(SalarioInput)) {
                    showMessageDialog("Por favor, preencha o campo Salario apenas com números para realizar o cadastro.");
                } else if (isFieldEmpty(txtDESCONTO)) {
                    showMessageDialog("Por favor, preencha o Desconto do funcionário para realizar o seu cadastro.");
                } else {
                    String DescontoInput = txtDESCONTO.getText();
                    if (!isFloat(DescontoInput)) {
                        showMessageDialog("Por favor, preencha o campo Desconto apenas com números para realizar o cadastro.");
                    } else if (isFieldEmpty(txtVALORHORA)) {
                        showMessageDialog("Por favor, preencha o Valor Hora do funcionário para realizar o seu cadastro.");
                    } else {
                        String ValorHoraInput = txtVALORHORA.getText();
                        if (!isFloat(ValorHoraInput)) {
                            showMessageDialog("Por favor, preencha o campo Valor Hora apenas com números para realizar o cadastro.");
                        } else if (isFieldEmpty(txtQTHORA)) {
                            showMessageDialog("Por favor, preencha a Quantidade de Horas do funcionário para realizar o seu cadastro.");
                        } else {
                            String QtdeHoraInput = txtQTHORA.getText();
                            if (!isFloat(QtdeHoraInput)) {
                                showMessageDialog("Por favor, preencha o campo Quantidade de Horas apenas com números para realizar o cadastro.");
                            } else {
                                funcionario = new Funcionario();
                                funcionario.setCracha(Integer.parseInt(txtCRACHA.getText()));
                                funcionario.setNome(txtNOME.getText());
                                funcionario.setTipoVinculo(comboVINCULO.getSelectedItem().toString().charAt(0));
                                funcionario.setValorHora(Float.parseFloat(txtVALORHORA.getText()));
                                funcionario.setQtdeHora(Float.parseFloat(txtQTHORA.getText()));
                                funcionario.setSalario(Float.parseFloat(txtSALARIO.getText()));
                                funcionario.setValorDesconto(Float.parseFloat(txtDESCONTO.getText()));
                                showMessageDialog("Funcionário cadastrado com sucesso."
                                        + "\nClique no botão Mostrar para visualizar o seu último cadastro.");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // BOTÃO SAIR

        System.exit(0);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTÃO MOSTRAR

        if (funcionario == null) {
            showMessageDialog("Você não cadastrou nenhum funcionário.");
        } else {
            showMessageDialog(funcionario.imprimir());
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // BOTÃO ALTERAR

        if (funcionario == null) {
            showMessageDialog("No momento você não criou nenhum funcionáriodo para realizar qualquer alteração.");
        } else if (isFieldEmpty(txtCRACHA)) {
            showMessageDialog("Por favor, preencha o Crachá do funcionário para realizar a sua alteração.");
        } else {
            String CrachaInput = txtCRACHA.getText();
            if (!isNumeric(CrachaInput)) {
                showMessageDialog("Por favor, preencha o campo Crachá apenas com números para realizar a sua alteração.");
            } else if (isFieldEmpty(txtNOME)) {
                showMessageDialog("Por favor, preencha o Nome do funcionário para realizar a sua alteração.");
            } else if (comboVINCULO.getSelectedItem().equals("-")) {      // Por ser uma ComboBox, foi necessario dar "getSelectedItem" ao em vez de "getText".
                showMessageDialog("Por favor, selecione o Tipo de Vínculo para realizar a sua alteração.");
            } else if (isFieldEmpty(txtSALARIO)) {
                showMessageDialog("Por favor, preencha o Salário do funcionário para realizar a sua alteração.");
            } else {
                String SalarioInput = txtSALARIO.getText();
                if (!isFloat(SalarioInput)) {
                    showMessageDialog("Por favor, preencha o campo Salario apenas com números para realizar a sua alteração.");
                } else if (isFieldEmpty(txtDESCONTO)) {
                    showMessageDialog("Por favor, preencha o Desconto do funcionário para realizar a sua alteração.");
                } else {
                    String DescontoInput = txtDESCONTO.getText();
                    if (!isFloat(DescontoInput)) {
                        showMessageDialog("Por favor, preencha o campo Desconto apenas com números para realizar a sua alteração.");
                    } else if (isFieldEmpty(txtVALORHORA)) {
                        showMessageDialog("Por favor, preencha o Valor Hora do funcionário para realizar a sua alteração.");
                    } else {
                        String ValorHoraInput = txtVALORHORA.getText();
                        if (!isFloat(ValorHoraInput)) {
                            showMessageDialog("Por favor, preencha o campo Valor Hora apenas com números para realizar a sua alteração.");
                        } else if (isFieldEmpty(txtQTHORA)) {
                            showMessageDialog("Por favor, preencha a Quantidade de Horas do funcionário para realizar a sua alteração.");
                        } else {
                            String QtdeHoraInput = txtQTHORA.getText();
                            if (!isFloat(QtdeHoraInput)) {
                                showMessageDialog("Por favor, preencha o campo Quantidade de Horas apenas com números para realizar a sua alteração.");
                            } else {
                                funcionario.setCracha(Integer.parseInt(txtCRACHA.getText()));
                                funcionario.setNome(txtNOME.getText());
                                funcionario.setTipoVinculo(comboVINCULO.getSelectedItem().toString().charAt(0));
                                funcionario.setValorHora(Float.parseFloat(txtVALORHORA.getText()));
                                funcionario.setQtdeHora(Float.parseFloat(txtQTHORA.getText()));
                                funcionario.setSalario(Float.parseFloat(txtSALARIO.getText()));
                                funcionario.setValorDesconto(Float.parseFloat(txtDESCONTO.getText()));
                                showMessageDialog("O Último funcionário cadastrado foi atualizado com sucesso."
                                        + "\nClique no botão Mostrar para verificar a sua correção.");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(aula3ex3swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(aula3ex3swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(aula3ex3swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(aula3ex3swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new aula3ex3swing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboVINCULO;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtCRACHA;
    private javax.swing.JTextField txtDESCONTO;
    private javax.swing.JTextField txtNOME;
    private javax.swing.JTextField txtQTHORA;
    private javax.swing.JTextField txtSALARIO;
    private javax.swing.JTextField txtVALORHORA;
    // End of variables declaration//GEN-END:variables
}
